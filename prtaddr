#!/usr/bin/env python3
# prtaddr - Print Address to HAGAKI
#
# manontanto
#
from tkinter import filedialog as tkdialog
import os
import sys
import glob
import subprocess
import csv
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import mm
import vobject
import PyPDF2

root = tkdialog.Tk()
root.withdraw()

GEN_SHIN_GOTHIC = PATH_TO_FONTS + 'GenShinGothic-P-Light.ttf'
WORK_DIR = PATH_TO_WORK
try:
    os.mkdir(WORK_DIR)  # python3
except FileExistsError:
    pass

def mk1PDF(pg, l):
    (sei, mei, post_code, addr, renmei) = l
    c = canvas.Canvas(WORK_DIR + 'card' + str(pg) + '.pdf',\
            pagesize=(100 * mm, 148 * mm))
    pdfmetrics.registerFont(TTFont('GenShinGothic', GEN_SHIN_GOTHIC))
    # Create textobject
    textobject = c.beginText()
#   郵便番号
    textobject.setTextOrigin(45 * mm, 126 * mm)
    textobject.setFont('GenShinGothic', 20)
    textobject.setCharSpace(8.4)
    if '-' in post_code:
        post_code = post_code[0:3] + post_code[4:8]
    textobject.textLine(post_code)
#   住所
    textobject.setTextOrigin(30 * mm, 90 * mm)
    textobject.setFont('GenShinGothic', 11)
    textobject.setCharSpace(0)
    if ' ' in addr:
        addr_lines = addr.split()
        textobject.textLine(addr_lines[0])
        textobject.textLine(addr_lines[1])
    else:
        textobject.textLine(addr)
#   氏名
#    textobject.setTextOrigin(30 * mm, 80 * mm)
    textobject.moveCursor(0 * mm, 5 * mm)
    textobject.setCharSpace(4)
    textobject.textLine(sei + ' ' + mei + ' 様')
    if renmei:
        textobject.textLine(sei + ' ' + renmei + ' 様')
#   料金別納    
    def stamp():
        x = 12.2
        y = 113.8
        w = 18
        h = 20.8
        c.setLineWidth(0.1*mm)
        c.rect(x * mm, y * mm, w * mm, h * mm)
        c.line(x * mm, (y + 14) * mm, (x + w) * mm, (y + 14) * mm)
        c.line(x * mm, (y + 9) * mm, (x + w) * mm, (y + 9) * mm)
        textobject.setTextOrigin((x + 0.8) * mm, (y + 10.5) * mm)
        textobject.setFont('GenShinGothic', 8)
        textobject.setCharSpace(0)
        textobject.textLine('料金別納郵便')

#    stamp()
#   テキスト
    c.drawText(textobject)
    c.save()

def readvcf(fileName):
    """
    vcfファイルを読み，姓・名・郵便番号・住所・連名をリストにする
    vcfファイルは，Big Sur/連絡先.appの仕様による
    """
    addr_list = []
    with open(fileName, 'r') as vcf_file:
        for vcard in vobject.readComponents(vcf_file):
            sei = vcard.n.value.family
            mei = vcard.n.value.given
            pcode = vcard.adr.value.code
            addr = vcard.adr.value.region + vcard.adr.value.city \
                        + vcard.adr.value.street + vcard.adr.value.extended \
                        + vcard.adr.value.box
            renmei = ''
            if hasattr(vcard, 'x_abrelatednames'):
                renmei = vcard.x_abrelatednames.value
            addr_list.append([sei, mei, pcode, addr, renmei])
        return addr_list

def readcsv(fileName):
    """
    csvファイルを読み，姓・名・郵便番号・住所・連名をリストにする
    読み取るファイルは，この順序の5カラムのみが許容される
    """
    with open(fileName, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        l = list(csv_reader)
        if len(l[0]) != 5:
            print(l[0])
            print('This CSV file must have 5 culumns.')
            print('姓, 名, 郵便番号, 住所, 連名')
            print('Please check the file contents.')
            sys.exit()

        return l

def combine():
    """ PDFをまとめて1ファイルにしてWORK_DIRに置く"""

    pdf_writer = PyPDF2.PdfFileWriter()

    pdf_files = []
    pdf_files = glob.glob(WORK_DIR + 'card*.pdf')
    for filename in pdf_files:
        pdf_file_obj = open(filename, 'rb')
        pdf_reader = PyPDF2.PdfFileReader(pdf_file_obj)
        page_obj = pdf_reader.getPage(0)
        pdf_writer.addPage(page_obj)
    pdf_output = open(WORK_DIR + 'combined.pdf', 'wb')
    pdf_writer.write(pdf_output)
    pdf_output.close()

def readfn():
    """
    入力ファイル名を得る
    ファイル名には'.csv', '.vcf'の拡張子が不可欠
    """

    read_fileName = tkdialog.askopenfilename(initialdir=os.chdir(WORK_DIR))
    if not read_fileName:
        sys.exit() # null read_fileName
    return read_fileName

def main():
    fileName = readfn()
#    *.vcf or *.csv ?????
    addrList = []
    if os.path.splitext(fileName)[1] == '.vcf':
        addrList = readvcf(fileName)
    elif os.path.splitext(fileName)[1] == '.csv':
        addrList = readcsv(fileName)
    else:
        print(fileName)
        print('Only *.vcf or *.csv')
        sys.exit()

    count_pg = 1
    for l in addrList:
        mk1PDF(count_pg,l)
        count_pg += 1
    combine()
    for f in glob.glob(WORK_DIR + 'card*.pdf'):
        os.remove(f)
    k = input('Printer 準備 OK? [y/n]: ')
    if k.lower()  not in ['y', 'yes']:
        sys.exit()
    subprocess.run(['lpr', '-P', 'EPSON_EP_707A_Series', WORK_DIR + 'combined.pdf'],\
            check=True)

if __name__ == '__main__':
    main()
